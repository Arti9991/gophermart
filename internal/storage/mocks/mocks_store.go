// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gophermart/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorUserFunc is a mock of StorUserFunc interface.
type MockStorUserFunc struct {
	ctrl     *gomock.Controller
	recorder *MockStorUserFuncMockRecorder
}

// MockStorUserFuncMockRecorder is the mock recorder for MockStorUserFunc.
type MockStorUserFuncMockRecorder struct {
	mock *MockStorUserFunc
}

// NewMockStorUserFunc creates a new mock instance.
func NewMockStorUserFunc(ctrl *gomock.Controller) *MockStorUserFunc {
	mock := &MockStorUserFunc{ctrl: ctrl}
	mock.recorder = &MockStorUserFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorUserFunc) EXPECT() *MockStorUserFuncMockRecorder {
	return m.recorder
}

// GetUserBalance mocks base method.
func (m *MockStorUserFunc) GetUserBalance(UserID string) (models.BalanceData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", UserID)
	ret0, _ := ret[0].(models.BalanceData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStorUserFuncMockRecorder) GetUserBalance(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStorUserFunc)(nil).GetUserBalance), UserID)
}

// GetUserID mocks base method.
func (m *MockStorUserFunc) GetUserID(Login string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", Login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockStorUserFuncMockRecorder) GetUserID(Login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockStorUserFunc)(nil).GetUserID), Login)
}

// MinusUserBalance mocks base method.
func (m *MockStorUserFunc) MinusUserBalance(sum float64, UserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinusUserBalance", sum, UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MinusUserBalance indicates an expected call of MinusUserBalance.
func (mr *MockStorUserFuncMockRecorder) MinusUserBalance(sum, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinusUserBalance", reflect.TypeOf((*MockStorUserFunc)(nil).MinusUserBalance), sum, UserID)
}

// SaveUser mocks base method.
func (m *MockStorUserFunc) SaveUser(Login, Password, UserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", Login, Password, UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockStorUserFuncMockRecorder) SaveUser(Login, Password, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockStorUserFunc)(nil).SaveUser), Login, Password, UserID)
}

// MockStorOrderFunc is a mock of StorOrderFunc interface.
type MockStorOrderFunc struct {
	ctrl     *gomock.Controller
	recorder *MockStorOrderFuncMockRecorder
}

// MockStorOrderFuncMockRecorder is the mock recorder for MockStorOrderFunc.
type MockStorOrderFuncMockRecorder struct {
	mock *MockStorOrderFunc
}

// NewMockStorOrderFunc creates a new mock instance.
func NewMockStorOrderFunc(ctrl *gomock.Controller) *MockStorOrderFunc {
	mock := &MockStorOrderFunc{ctrl: ctrl}
	mock.recorder = &MockStorOrderFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorOrderFunc) EXPECT() *MockStorOrderFuncMockRecorder {
	return m.recorder
}

// GetAccurOrders mocks base method.
func (m *MockStorOrderFunc) GetAccurOrders(num int) chan models.OrderAns {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccurOrders", num)
	ret0, _ := ret[0].(chan models.OrderAns)
	return ret0
}

// GetAccurOrders indicates an expected call of GetAccurOrders.
func (mr *MockStorOrderFuncMockRecorder) GetAccurOrders(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccurOrders", reflect.TypeOf((*MockStorOrderFunc)(nil).GetAccurOrders), num)
}

// GetUserOrders mocks base method.
func (m *MockStorOrderFunc) GetUserOrders(UserID string) (models.UserOrdersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", UserID)
	ret0, _ := ret[0].(models.UserOrdersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockStorOrderFuncMockRecorder) GetUserOrders(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockStorOrderFunc)(nil).GetUserOrders), UserID)
}

// GetUserWithdrawals mocks base method.
func (m *MockStorOrderFunc) GetUserWithdrawals(UserID string) (models.UserWithdrawList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", UserID)
	ret0, _ := ret[0].(models.UserWithdrawList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockStorOrderFuncMockRecorder) GetUserWithdrawals(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockStorOrderFunc)(nil).GetUserWithdrawals), UserID)
}

// SaveNewOrder mocks base method.
func (m *MockStorOrderFunc) SaveNewOrder(UserID, number string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewOrder", UserID, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewOrder indicates an expected call of SaveNewOrder.
func (mr *MockStorOrderFuncMockRecorder) SaveNewOrder(UserID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewOrder", reflect.TypeOf((*MockStorOrderFunc)(nil).SaveNewOrder), UserID, number)
}

// SaveWithdrawOrder mocks base method.
func (m *MockStorOrderFunc) SaveWithdrawOrder(UserID, number string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithdrawOrder", UserID, number, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWithdrawOrder indicates an expected call of SaveWithdrawOrder.
func (mr *MockStorOrderFuncMockRecorder) SaveWithdrawOrder(UserID, number, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithdrawOrder", reflect.TypeOf((*MockStorOrderFunc)(nil).SaveWithdrawOrder), UserID, number, sum)
}

// SetAccurOrders mocks base method.
func (m *MockStorOrderFunc) SetAccurOrders(writeCh chan models.OrderAns) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccurOrders", writeCh)
}

// SetAccurOrders indicates an expected call of SetAccurOrders.
func (mr *MockStorOrderFuncMockRecorder) SetAccurOrders(writeCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccurOrders", reflect.TypeOf((*MockStorOrderFunc)(nil).SetAccurOrders), writeCh)
}
