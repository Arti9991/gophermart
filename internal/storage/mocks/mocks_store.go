// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorFunc is a mock of StorFunc interface.
type MockStorFunc struct {
	ctrl     *gomock.Controller
	recorder *MockStorFuncMockRecorder
}

// MockStorFuncMockRecorder is the mock recorder for MockStorFunc.
type MockStorFuncMockRecorder struct {
	mock *MockStorFunc
}

// NewMockStorFunc creates a new mock instance.
func NewMockStorFunc(ctrl *gomock.Controller) *MockStorFunc {
	mock := &MockStorFunc{ctrl: ctrl}
	mock.recorder = &MockStorFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorFunc) EXPECT() *MockStorFuncMockRecorder {
	return m.recorder
}

// GetUserID mocks base method.
func (m *MockStorFunc) GetUserID(Login string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", Login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockStorFuncMockRecorder) GetUserID(Login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockStorFunc)(nil).GetUserID), Login)
}

// SaveUser mocks base method.
func (m *MockStorFunc) SaveUser(Login, Password, UserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", Login, Password, UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockStorFuncMockRecorder) SaveUser(Login, Password, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockStorFunc)(nil).SaveUser), Login, Password, UserID)
}
